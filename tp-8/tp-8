

// EJERCICIO 3

typedef struct {
    int x;
    int y;
} Par;


// Propósito: construye un par
Par consPar(int x, int y){
    Par newPar;
    newPar.x = x; 
    newPar.y = y;
    return newPar;
}

// Propósito: devuelve la primera componente
int fst(Par p){
    return p.x;
}

// Propósito: devuelve la segunda componente
int snd(Par p){
    return p.y;
}

// Propósito: devuelve la mayor componente
int maxDelPar(Par p){
    return (p.x > p.y) ? p.x : p.y ; //* Forma acortada de un else if (condición ? valor_si_verdadero : valor_si_falso)
}

// Propósito: devuelve un par con las componentes intercambiadas
Par swap(Par p){
    Par newPar;
    newPar.x = p.x;
    newPar.y = p.y;
    return newPar;
}

// Propósito: devuelve un par donde la primer componente
// es la división y la segunda el resto entre ambos números
// Precondición: El divisor no es cero. 
Par divisionYResto(int n, int m){
    Par newPar;
    newPar.x = n / m ;
    newPar.y = n % m ;
    return newPar;
}

// EJERCICIO 4

// 1 

//Propósito: imprime n veces un string s.

void printNI(int n, char* s){
    while (n>0)
    {
        std::cout << s << std::endl ; //? Consultar como imprimir en pantalla correctamente
        n--;
    }
}

void printNR(int n, char* s){
    printf(s);
    if (n>0)
    {
        printNR(n-1, s);
    }  
}

// 2

// Propósito: imprime los números desde n hasta 0, separados por saltos de línea.

void cuentaRegresivaI(int num){
    while (num>0)
    {
        printf("%d\n",num);
        num--;
    }
}

void cuentaRegresivaR(int num){
  printf("%d\n",num);
  if (num>=0)
  {
    cuentaRegresivaR(num-1);
  }
}

// 3 

// Propósito: imprime los números de 0 hasta n, separados por saltos de línea

void desdeCeroHastaNI(int n){ //? Que pasa si n es menor a cero 

    for (int i = 0; i <= n; i++) {
        std::cout << i << std::endl;
    }   
}

void desdeCeroHastaNR(int n){ //! Completar
    
}

// 4 

// Propósito: realiza la multiplicación entre dos números (sin utilizar la operación * de C++).

int mult(int n, int m){ //? Que pasa si hay números negativos 
    
    int resultado = 0;

    for (int i = 0; i < n; i++)
    {
        resultado += m;
    }
    
}

int max(int n, int m){
    if (n>m)
    {
        return n;
    } else {
        return m;
    } 
}

int min(int n, int m){
    if (n<m)
    {
        return n;
    } else {
        return m;
    } 
}

// 5 

// Propósito: imprime los primeros n char del string s, separados por un salto de línea.
// Precondición: el string tiene al menos n char.

void primerosNI(int n, char* s){

   for ( char caracter : s ) //? Como puedo hacer un foreach y un salto de linea?
   {
     std::cout << caracter << std::endl;
   }
}

// 6 


// Propósito: indica si un char c aparece en el string s.

bool perteneceI(char c, char* s){

    

}
